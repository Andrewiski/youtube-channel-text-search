<!DOCTYPE html>

<html class="h-100">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width">
    <title>YouTube Transcripts Search</title>
    <link href="/javascript/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="/javascript/fontawesome/css/all.min.css" rel="stylesheet" />   
    <!--Served up by the socket.io service directly as part of the IO service process-->
    <script src="/socket.io/socket.io.js"></script>
    <script src="/javascript/bootstrap/js/bootstrap.min.js"></script>
    <script src="/javascript/fontawesome/js/all.min.js"></script>
    <script src="/javascript/dayjs/dayjs.min.js"></script>
    <script src="/javascript/dayjs/plugin/localizedFormat.js"></script>
    <script src="/javascript/js-cookie/js.cookie.min.js"></script>
    <script src="/javascript/mustache/mustache.min.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    
   
    
    <script>
        var ajax = function(url) {

            return new Promise(function(resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.onload = function() {
                    if (this.status >= 200 && this.status < 300) {
                        try {
                            resolve(JSON.parse(this.responseText));
                        } catch (e) {
                            reject(e);
                        }
                    } else {
                        reject({
                            status: this.status,
                            statusText: xhr.statusText
                        });
                    }
                    
                };
                xhr.onerror = reject;
                xhr.open('GET', url);
                xhr.send();
            });
            
            return xhr;
        }

        var commonData = {
            socket: null,
            pendingLoadTransactions: {}

        };

        var htmlToElement = function (html) {
            var template = document.createElement('template');
            html = html.trim(); // Never return a text node of whitespace as the result
            template.innerHTML = html;
            return template.content.firstChild;
        }

        document.addEventListener('DOMContentLoaded', function () {
            dayjs.extend(window.dayjs_plugin_localizedFormat);
            commonData.socket = io();

            document.querySelector("#btnLoadVideos").addEventListener("click", (evt) => {
                try{
                    let channelId = document.querySelector("#youtubeChannelId").value;
                    let options = {
                        channelId: channelId, 
                        loadMode: "latest"
                    }
                    let statusMessage = document.querySelector("#loadVideosStatusMessage");
                    if(!channelId){
                        
                        statusMessage.innerHTML = "ChannelId is required";
                        statusMessage.classList.remove("visually-hidden");
                        statusMessage.classList.add("alert-danger");
                        return;
                    }else{
                        statusMessage.classList.add("visually-hidden");
                        statusMessage.classList.remove("alert-danger");
                    }

                    if(document.querySelector("#LoadVideosDateBeforeOption").checked){
                        options.loadMode = "before"
                        options.beforeDate = document.querySelector("#LoadVideosDateBefore").value;
                        if(!options.beforeDate){
                            statusMessage.innerHTML = "Before Date is required";
                            statusMessage.classList.remove("visually-hidden");
                            statusMessage.classList.add("alert-danger");
                            return;
                        }
                    }else if(document.querySelector("#LoadVideosDateAfterOption").checked){
                        options.loadMode = "after"
                        options.afterDate = document.querySelector("#LoadVideosDateAfter").value;
                        if(!options.afterDate){
                            statusMessage.innerHTML = "After Date is required";
                            statusMessage.classList.remove("visually-hidden");
                            statusMessage.classList.add("alert-danger");
                            return;
                        }
                    }else if(document.querySelector("#LoadVideosDateBetweenOption").checked){
                        options.loadMode = "between"
                        options.betweenDateStart = document.querySelector("#LoadVideosDateBetweenStart").value;
                        options.betweenDateEnd = document.querySelector("#LoadVideosDateBetweenEnd").value;
                        if(!options.betweenDateStart || !options.betweenDateEnd){
                            statusMessage.innerHTML = "Both Between Date Start and End are required";
                            statusMessage.classList.remove("visually-hidden");
                            statusMessage.classList.add("alert-danger");
                            return;
                        }
                    }else {
                        // assume Latestif(document.querySelector("#LoadVideosDateLatestOption").checked){
                        options.loadMode = "latest"
                    }
                    
                    commonData.socket.emit("loadVideos", options);  
                    const loadButton = evt.currentTarget;
                    loadButton.disabled = true;
                    loadButton.querySelector(".spinner-border").classList.remove("visually-hidden");
                    statusMessage.innerHTML = "Loading Videos ....";
                    statusMessage.classList.remove("visually-hidden");
                    statusMessage.classList.add("alert-success");
                }catch(ex){
                    statusMessage.innerHTML = "Error: " + ex.message;
                    statusMessage.classList.remove("visually-hidden");
                    statusMessage.classList.add("alert-danger");
                    console.error(ex);
                }
            });

            document.querySelector(".btnTest").addEventListener("click", (evt) => {
                var videoId = document.querySelector(".youtube-videoid").value;
                commonData.socket.emit("test", {videoId: videoId});    
            });

            document.querySelector(".btnTranscriptsSearch").addEventListener("click", (evt) => {
                var search = document.querySelector(".transcripts-search").value;
                commonData.socket.emit("searchTranscripts", {search: search});    
            });
            commonData.socket.on("searchTranscriptsResults", function(searchResults){
                var searchTranscriptsResults = document.querySelector(".searchTranscriptsResults");
                searchTranscriptsResults.innerHTML = "";
                var templateHtml = document.querySelector(".templates .searchResultsTemplate .searchResultTemplate").innerHTML;
                for (const key in searchResults) {
                    let video = searchResults[key];
                    var rendered = Mustache.render(templateHtml, video);
                    searchTranscriptsResults.appendChild(htmlToElement(rendered)) 
                }
            });

            document.querySelector(".btnVideosSearch").addEventListener("click", (evt) => {
                let find = {};
                if(document.querySelector("#SearchVideosDateRangeBetween").checked){
                    find.publishedAt = {};
                    find.publishedAt.$gte = document.querySelector(".videosPanel .SearchVideosDateRangeStart").value;
                    find.publishedAt.$lte = document.querySelector(".videosPanel .SearchVideosDateRangeEnd").value;
                }
                if(document.querySelector("#SearchVideosHasTranscriptsFalse").checked){
                    find.hasTranscripts =  false;
                }
                if(document.querySelector("#SearchVideosHasTranscriptsTrue").checked){
                    find.hasTranscripts =  true;
                }
                commonData.socket.emit("searchVideos", {find: find});    
            });
            var loadVideoTranscriptsButtonClick = function(evt){
                let videoId = evt.currentTarget.getAttribute("data-videoid");
                commonData.socket.emit("loadVideoTranscripts", {videoId: videoId});
                commonData.pendingLoadTransactions[videoId] = { button: evt.currentTarget, pending:true};
                evt.currentTarget.disabled = true;
                evt.currentTarget.querySelector(".spinner-border").classList.remove("visually-hidden");
                let statusMessage = evt.currentTarget.parentElement.querySelector(".statusMessage");
                if(statusMessage){
                    statusMessage.classList.add("visually-hidden");
                }
            }
            const loadVideosProgessLogs = document.querySelector("#loadVideosProgessLog");
            const loadVideosProgessLogTemplate = document.querySelector(".templates .loadVideoProgessTemplate .progessLog");
            commonData.socket.on("loadVideosProgress",function(eventData){
                //console.log("loadVideosProgress", eventData);
                let message = eventData.message 
                if(eventData.video){
                    message = message + " " + eventData.video.title + " (" + eventData.video.videoId + ")" ;
                }
                let loadVideosProgessLog = document.importNode(loadVideosProgessLogTemplate, true);
                loadVideosProgessLog.querySelector(".ts").textContent = dayjs().format('L') + ' ' + dayjs().format('LTS');
                loadVideosProgessLog.querySelector(".position").textContent = eventData.position || "";
                loadVideosProgessLog.querySelector(".count").textContent = eventData.count || "";
                loadVideosProgessLog.querySelector(".message").textContent = message;
                if(eventData.error){
                    loadVideosProgessLog.classList.add("table-danger");
                }
                loadVideosProgessLogs.insertBefore(loadVideosProgessLog, loadVideosProgessLogs.firstChild);
                let statusMessage = document.querySelector("#loadVideosStatusMessage");
                const loadButton = document.querySelector("#btnLoadVideos");
                if(eventData.count > 0){
                    message = message + " " + eventData.position + "/" + eventData.count + " Videos";
                }
                if(eventData.completed === false){
                    
                    statusMessage.innerHTML = message;
                    statusMessage.classList.remove("visually-hidden");
                    if(loadVideosProgress.error){
                        statusMessage.classList.add("alert-danger");
                    }else{
                        statusMessage.classList.add("alert-success");
                    }
                    if(loadButton.disabled === false){
                        loadButton.disabled = true;
                        loadButton.querySelector(".spinner-border").classList.remove("visually-hidden");
                    }
                }else{
                    
                    statusMessage.innerHTML = message;
                    statusMessage.classList.remove("visually-hidden");
                    if(eventData.error){
                        statusMessage.classList.add("alert-danger");
                    }else{
                        statusMessage.classList.add("alert-success");
                    }
                    
                    loadButton.disabled = false;
                    loadButton.querySelector(".spinner-border").classList.add("visually-hidden");
                    //statusMessage.innerHTML = "error: " + loadVideosProgress.message;
                    //statusMessage.classList.add("visually-hidden");
                    //statusMessage.classList.add("alert-danger");
                }
            });
            commonData.socket.on("searchVideosResults", function(searchResults){
                var searchVideosResults = document.querySelector(".searchVideosResults");
                searchVideosResults.innerHTML = "";
                var templateHtml = document.querySelector(".templates .searchVideosResultsTemplate .searchVideosResultTemplate").innerHTML;
                for (const key in searchResults) {
                    let video = searchResults[key];
                    var rendered = Mustache.render(templateHtml, video);
                    let newElement = htmlToElement(rendered);
                    searchVideosResults.appendChild(newElement) 
                    let button = newElement.querySelector(".btnLoadTranscripts");
                    if(button){
                        button.addEventListener("click", loadVideoTranscriptsButtonClick);
                    }
                    
                }
            });

            commonData.socket.on("loadVideoTranscriptsResults", function(loadVideoTranscriptsResults){
                var videoId = loadVideoTranscriptsResults.videoId;
                var loadTransaction = commonData.pendingLoadTransactions[videoId];
                if(loadTransaction){
                    loadTransaction.pending = false;
                    loadTransaction.button.querySelector(".spinner-border").classList.add("visually-hidden");
                    let statusMessage = loadTransaction.button.parentElement.querySelector(".statusMessage");
                    if(loadVideoTranscriptsResults.success === true){
                        loadTransaction.button.disabled = true;
                        loadTransaction.button.removeEventListener("click", loadVideoTranscriptsButtonClick);
                        loadTransaction.button.innerHTML = "Done";
                        loadTransaction.button.classList.remove("btn-primary");
                        loadTransaction.button.classList.add("btn-success");
                        statusMessage.innerHTML = loadVideoTranscriptsResults.message + " " + loadVideoTranscriptsResults.count + " Lines";
                        statusMessage.classList.remove("visually-hidden");
                    }else{
                        loadTransaction.button.disabled = false;
                        if(statusMessage){
                            statusMessage.innerHTML = "error: " + loadVideoTranscriptsResults.message;
                            statusMessage.classList.remove("visually-hidden");
                        }
                    }
                }
                
            });

            var isObject = function (a) {
                return (!!a) && (a.constructor === Object);
            };

            const serverLogRowTemplate = document.querySelector(".templates .serverLogsTemplate .logRow");
            const serverLogsElement = document.querySelector("#serverLogs");
            var addServerLog = function (log) {
                try {
                    
                    let serverLogRow = document.importNode(serverLogRowTemplate, true); 
                    serverLogRow.querySelector(".logTs").textContent = dayjs(log.timestamp).format('L') + ' ' + dayjs(log.timestamp).format('LTS');
                    let logLevelClass = "info";
                    switch (log.logLevel) {
                        case 'error':
                        case 'panic':
                        case 'fatal':
                            logLevelClass = 'danger';
                            break;
                        case 'warning':
                            logLevelClass = 'warning';
                            break;
                        case 'trace':
                        case 'verbose':
                        case 'debug':
                            logLevelClass = 'light';
                            break;
                    }
                    serverLogRow.setAttribute('title',log.logLevel);
                    serverLogRow.querySelector('.logApp').textContent = log.appName + ":" + log.appSubname;
                    
                    serverLogRow.classList.add('table-' + logLevelClass);
                    let logMessage = '';
                    if (log.args) {
                        log.args.forEach((item, index) => {
                            try {
                                if (logMessage.length > 0) {
                                    logMessage = logMessage + ', ';
                                }
                                if (isObject(log.args[index])) {
                                    logMessage = logMessage + JSON.stringify(log.args[index]);
                                } else {
                                    if (log.args[index] === undefined) {
                                        logMessage = logMessage + 'undefined';
                                    } else if (log.args[index] === null) {
                                        logMessage = logMessage + 'null';
                                    }
                                    else {
                                        logMessage = logMessage + log.args[index].toString();
                                    }
                                }
                            } catch (ex) {
                                console.log('error', 'Error addServerLog args', ex);
                            }
                        });
                    }
                    serverLogRow.querySelector('.logMsg').innerHTML = logMessage;
                    serverLogsElement.insertBefore(serverLogRow, serverLogsElement.firstChild);  
                    if (serverLogsElement.childElementCount > 1000) {
                        serverLogsElement.lastchild.remove();
                    }
                } catch (ex) {
                    console.log('error', 'Error addServerLog', ex);
                }
            };


            commonData.socket.on('serverLog', function (message) {
                //console.log('serverLog', message);
                
                addServerLog(message);
            });

            commonData.socket.on('serverLogs', function (logMessages) {
                //response message for issuing a packageUpdate
                //console.log('serverLogs', message);
                serverLogsElement.textContent = '';
                logMessages.forEach((item, index) => {
                    addServerLog(item);
                });
            });

            document.querySelector("#serverLogSubscribe").addEventListener("change", (evt) => {
                if(evt.currentTarget.checked){
                    commonData.socket.emit("serverLogsSubscribe", {});
                }else{
                    commonData.socket.emit("serverLogsUnsubscribe", {});
                }
            });

            let getVideoStats = function (){
                return new Promise((resolve, reject) => {
                    ajax("/api/videoStats").then((videoStats) => {
                        commonData.videoStats = videoStats;
                        resolve(videoStats);
                    }).catch((error) => {
                        console.log(error);
                        reject(error);
                    });
                });
            }

            let navMenuButtonEventHandler = function (event) {
                //event.target // newly activated tab
                //event.relatedTarget // previous active tab
                let tabId = event.target.getAttribute("data-bs-target");
                // if(tabId !=== "#serverLogsTab"){
                //     commonData.socket.emit("serverLogsUnsubscribe", {});
                // }
                switch (tabId) {
                    case "#serverLogsTab":
                        commonData.socket.emit("serverLogs", {});
                        break;
                    case "#loadTab":
                        getVideoStats().then((videoStats) => {
                            document.querySelector(".videoStats .videoCount").textContent = videoStats.videoCount;
                            document.querySelector(".videoStats .latestVideoPublishedAt").textContent = dayjs(videoStats.latestVideoPublishedAt).format('L') + ' ' + dayjs(videoStats.latestVideoPublishedAt).format('LTS');
                            document.querySelector(".videoStats .earliestVideoPublishedAt").textContent = dayjs(videoStats.earliestVideoPublishedAt).format('L') + ' ' + dayjs(videoStats.earliestVideoPublishedAt).format('LTS');
                            document.querySelector("#LoadVideosDateAfter").value = dayjs(videoStats.latestVideoPublishedAt).format('YYYY-MM-DD');
                            document.querySelector("#LoadVideosDateBefore").value = dayjs(videoStats.earliestVideoPublishedAt).format('YYYY-MM-DD');
                            document.querySelector("#LoadVideosDateBetweenStart").value = dayjs(videoStats.earliestVideoPublishedAt).add(-2,'day').format('YYYY-MM-DD');
                            document.querySelector("#LoadVideosDateBetweenEnd").value = dayjs(videoStats.earliestVideoPublishedAt).format('YYYY-MM-DD');
                            
                        }).catch((error) => {
                            console.log(error);
                        });
                        break;
                }
            }

            let navMenuButtons = document.querySelectorAll('.menuItems button[data-bs-toggle="tab"]');
            navMenuButtons.forEach((tabEl, index) => {
                tabEl.addEventListener('shown.bs.tab', navMenuButtonEventHandler)
            });
        }, false);
    </script>
</head>
<body class="d-flex flex-column h-100">
    <header>     
        <div class="navbar navbar-expand-lg navbar-light bg-light" >
            <div class="container">
                <div>
                    <div class="float-start">
                        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target="#navbarTopMenu" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <a class="navbar-brand youtubesearchlogo" href="/"><i class="fa-brands fa-youtube"></i> YouTube Transcript Search</a>
                    </div>
                    <div class="float-end">
                        <div class="collapse navbar-collapse" id="navbarTopMenu">
                            <ul class="navbar-nav navbar-right me-auto mb-2 mb-lg-0 menuItems" role="tablist">  
                                <li class="nav-item menuItem">
                                    <button class="nav-link active menuSearch" id="search-tab" data-bs-toggle="tab" data-bs-target="#searchTab" type="button" role="tab" aria-controls="search" aria-selected="false" >Search</button>
                                </li>
                                <li class="nav-item menuItem">
                                    <button class="nav-link menuSearch" id="videos-tab" data-bs-toggle="tab" data-bs-target="#videosTab" type="button" role="tab" aria-controls="search" aria-selected="false" >Videos</button>
                                </li>
                                <li class="nav-item menuItem">
                                    <button class="nav-link menuLoad" id="load-tab" data-bs-toggle="tab" data-bs-target="#loadTab" type="button" role="tab" aria-controls="load" aria-selected="false"  >Load</button>
                                </li>
                                <li class="nav-item menuItem" >
                                    <button class="nav-link menuServerLogs" id="serverLogs-tab" data-bs-toggle="tab" data-bs-target="#serverLogsTab" type="button" role="tab" aria-controls="serverlogs" aria-selected="false" >Logs</button>
                                </li>
                                <li class="nav-item menuItem" >
                                    <button class="nav-link menuDebug" id="debug-tab" data-bs-toggle="tab" data-bs-target="#debugTab" type="button" role="tab" aria-controls="debug" aria-selected="false" >Debug</button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </header>    

    <main class="flex-grow-0" >
        <div class="container mainContent">
            <div class="row">
                <div class="pageContent">
                    
                    <div class="tab-content">
                        <div class="tab-pane active" id="searchTab" role="tabpanel" aria-labelledby="search-tab">
                            <div class="card">
                                <div class="card-header">Search Transcripts</div>
                                <div class="card-body">
                                    <div class="searchPanel">
                                        <div class="input-group">
                                            <span class="input-group-text"></i>Search</span>
                                            <input class="form-control transcripts-search" id="transcriptsSearch" type="text" aria-label="YouTube VideoId" aria-describedby="inputGroup-sizing-sm" placeholder="YouTube VideoId" value='"box of rocks"' />
                                        </div>
                                        <div>
                                            <span class="small">To search for phrases use qoutes "box of rocks"!</span>
                                        </div>
                                        <div class="input-group">
                                            <button class="btn btn-secondary btn-sm btnTranscriptsSearch" title="Test">Search</button>
                                        </div>
                                    </div>
                                    <div>
                                        <table class="table table-sm table-striped">
                                            <thead><td></td><td></td></thead>
                                            <tbody class="searchTranscriptsResults">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="videosTab" role="tabpanel" aria-labelledby="video-tab">
                            <div class="card">
                                <div class="card-header">Videos</div>
                                <div class="card-body">
                                    <div class="videosPanel">
                                        <div class="input-group input-group-sm">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="SearchVideosDateRange" id="SearchVideosDateRangeAll" checked value="all">
                                                <label class="form-check-label" for="SearchVideosDateRangeAll">All</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="SearchVideosDateRange" id="SearchVideosDateRangeBetween" value="between">
                                                <label class="form-check-label" for="SearchVideosDateRangeBetween">Between</label>
                                            </div>
                                            <span class="input-group-text" >Start</span>
                                            <input class="form-control SearchVideosDateRangeStart" type="date"  aria-label="Start" aria-describedby="inputGroup-sizing-sm" placeholder="Start Date" />
                                            <span class="input-group-text" >End</span>
                                            <input class="form-control SearchVideosDateRangeEnd" type="date"  aria-label="End" aria-describedby="inputGroup-sizing-sm" placeholder="End Date" />
                                        </div>
                                        
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="SearchVideosHasTranscripts" id="SearchVideosHasTranscriptsAll" checked value="all">
                                            <label class="form-check-label" for="SearchVideosHasTranscriptsAll">All</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="SearchVideosHasTranscripts" id="SearchVideosHasTranscriptsFalse" value="false">
                                            <label class="form-check-label" for="SearchVideosHasTranscriptsFalse">Missing Transcripts</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="SearchVideosHasTranscripts" id="SearchVideosHasTranscriptsTrue" value="true">
                                            <label class="form-check-label" for="SearchVideosHasTranscriptsTrue">Has Transcripts</label>
                                        </div>
                                        <div class="input-group">
                                            <button class="btn btn-secondary btn-sm btnVideosSearch" title="Test">Search</button>
                                        </div>
                                        <div>
                                            <table class="table table-sm table-striped">
                                                <thead><td></td><td></td></thead>
                                                <tbody class="searchVideosResults">
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="loadTab" role="tabpanel" aria-labelledby="load-tab">
                            <div class="card">
                                <div class="card-header">Load Latest Videos</div>
                                <div class="card-body">
                                    <div class="loadPanel">
                                        <div class="videoStats">
                                            <span> Video Count:</span><span class="videoCount"></span>  <span> Latest: </span><span class="latestVideoPublishedAt"></span> <span> Earliest: </span><span class="earliestVideoPublishedAt"></span>
                                        </div>
                                        <div class="input-group mb-3 d-flex">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="LoadVideosDate" id="LoadVideosDateLatestOption" checked value="latest">
                                                <label class="form-check-label" for="LoadVideosDateLatestOption">Latest</label>
                                            </div>
                                        </div>
                                        <div class="input-group mb-3 d-flex">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="LoadVideosDate" id="LoadVideosDateBeforeOption" value="before">
                                                <label class="form-check-label" for="LoadVideosDateBeforeOption">Before</label>
                                                
                                            </div>
                                            <input class="form-control" id="LoadVideosDateBefore" type="date"  aria-label="Start" aria-describedby="inputGroup-sizing-sm" placeholder="Before Date" />
                                        </div>
                                        <div class="input-group mb-3 d-inline-flex">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="LoadVideosDate" id="LoadVideosDateAfterOption" value="after">
                                                <label class="form-check-label" for="LoadVideosDateAfterOption">After</label>
                                            </div>
                                            <input class="form-control form-control-sm" id="LoadVideosDateAfter" type="date"  aria-label="Start" aria-describedby="inputGroup-sizing-sm" placeholder="After Date" />
                                        </div>
                                        <div class="input-group mb-3 d-inline-flex">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="LoadVideosDate" id="LoadVideosDateBetweenOption" value="between">
                                                <label class="form-check-label" for="LoadVideosDateBetweenOption">Between</label>
                                            </div>
                                            <input class="form-control form-control-sm" id="LoadVideosDateBetweenStart" type="date"  aria-label="Start" aria-describedby="inputGroup-sizing-sm" placeholder="Start Date" />
                                            <span class="fs-5 px-2"><i class="fa-solid fa-minus"></i></span>
                                            <input class="form-control form-control-sm" id="LoadVideosDateBetweenEnd" type="date"  aria-label="Endt" aria-describedby="inputGroup-sizing-sm" placeholder="End Date" />
                                        </div> 
                                        
                                        <div class="input-group mb-3 col-lg-3">
                                            <span class="input-group-text"></i>Youtube Channel Id</span>
                                            <input class="form-control youtube-channelid" id="youtubeChannelId" type="text" aria-label="YouTube ChannelId" aria-describedby="inputGroup-sizing-sm" placeholder="YouTube ChannelId" value="UCXMBuPm5AakJO-g6n_Ra4wA" />
                                        </div>
                                        <div class="mb-3">
                                            <button class="btn btn-primary btn-sm" id="btnLoadVideos" title="Load New Videos"><span class="spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span><span class="px-2">Load Videos</span></button>
                                            <div class="visually-hidden" id="loadVideosStatusMessage"></div>
                                        </div>
                                    </div>
                                    <div>
                                        <table class="table table-sm table-striped">
                                            <thead><td>Time</td><td>Position</td><td>Count</td><td>Message</td></thead>
                                            <tbody id="loadVideosProgessLog">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="serverLogsTab" role="tabpanel" aria-labelledby="serverLogs-tab">
                            <div class="card">
                                <div class="card-header">Server Logs</div>
                                <div class="card-body">
                                    <div class="serverLogsPanel">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="serverLogSubscribe">
                                            <label class="form-check-label" for="serverLogSubscribe">Live Logs</label>
                                        </div>
                                        <table class="table table-condensed">
                                            <thead>
                                                <tr><th>Timestamp</th><th>App</th><th>Message</th></tr>
                                            </thead>
                                            <tbody id="serverLogs" class="serverLogs">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            
                        </div>
                        <div class="tab-pane" id="debugTab" role="tabpanel" aria-labelledby="debug-tab">
                            <div class="card">
                                <div class="card-header">Debug</div>
                                <div class="card-body">
                                    <div class="debugPanel">
                                    <div class="input-group">
                                        <span class="input-group-text"></i>VideoId</span>
                                        <input class="form-control youtube-videoid" id="testYoutubeVideoid" type="text" aria-label="YouTube VideoId" aria-describedby="inputGroup-sizing-sm" placeholder="YouTube VideoId" value="MnZc7YaW4CI" />
                                    </div>
                                    <div class="input-group">
                                        <button class="btn btn-secondary btn-sm btnTest" title="Test">Test</button>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>    
            </div>
        </div>
    </main>
    
    <footer class="footer mt-auto py-3 bg-light">
        <div class="container">
            <p class="text-center">
                <span class="text-muted">YouTube Transcript Search</span>
            </p>
        </div>
    </footer>
    
    <div style="display: none;" class="templates">
      
        <div class="searchResultsTemplate">
            <table>
                <tbody class="searchResultTemplate">
                    <tr>
                        <td>
                            <div>
                                <a href="https://www.youtube.com/watch?v={{videoId}}" target="youTube">
                                    <img src="{{video.thumbnails.default.url}}" />
                                </a>
                            </div>
                            <div><a href="https://www.youtube.com/watch?v={{videoId}}" target="_blank">new</a></div>
                            <div>
                                <span class="bold">{{{video.title}}}</span>
                            </div>
                            <div>
                                <span class="small">{{video.channelTitle}}</span>
                            </div>
                            <div>
                                <span class="small">{{video.publishedAt}}</span>
                            </div>
                            <div>
                                <span class="small">{{video.description}}</span>
                            </div>
                        </td>
                        <td height="200">
                            <div class="overflow-auto">
                                {{#transcripts}}
                                <p><a href="https://www.youtube.com/watch?v={{videoId}}&t={{offsetSeconds}}" target="youTube">{{offsetSeconds}}</a> {{text}}</p>
                                {{/transcripts}}
                            </div>
                        </td>
                    </tr>         
                </tbody>
            </table>
        </div>
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
                <div class="toast-header">
                <img src="..." class="rounded me-2" alt="...">
                <strong class="me-auto">Alert</strong>
                <small>11 mins ago</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                This is a toast message.
                </div>
            </div>
        </div>
        <div class="searchVideosResultsTemplate">
            <table>
                <tbody class="searchVideosResultTemplate">
                    <tr>
                        <td>
                            <div>
                                <a href="https://www.youtube.com/watch?v={{videoId}}" target="youTube">
                                    <img src="{{thumbnails.default.url}}" />
                                </a>
                            </div>
                            <div><a href="https://www.youtube.com/watch?v={{videoId}}" target="_blank">new</a></div>
                            <div>
                                <span class="bold">{{{title}}}</span>
                            </div>
                            <div>
                                <span class="small">{{channelTitle}}</span>
                            </div>
                            <div>
                                <span class="small">{{publishedAt}}</span>
                            </div>
                            <div>
                                <span class="small">{{description}}</span>
                            </div>
                        </td>
                        <td>
                            <div>
                                {{^hasTranscripts}}
                                    <button class="btn btn-primary btnLoadTranscripts" data-videoid="{{videoId}}">
                                        <span class="spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span>
                                        Load Transcripts
                                    </button>
                                    <div class="visually-hidden statusMessage"></div>
                                {{/hasTranscripts}}
                                {{#hasTranscripts}}
                                    <div>Transcripts Line Count:{{transcriptCount}}</div>
                                {{/hasTranscripts}}
                            </div>
                        </td>
                    </tr>         
                </tbody>
            </table>
        </div>
        <div class="serverLogsTemplate">

            <table>
                <tr class="logRow"><td class="logTs"></td><td class="logApp"></td><td class="logMsg"></td></tr>
            </table>

        </div>

        <div class="loadVideoProgessTemplate">

            <table>
                <tr class="progessLog"><td class="ts"></td><td class="position"></td><td class="count"></td><td class="message"></td></tr>
            </table>

        </div>
    </div>
</body>
</html>